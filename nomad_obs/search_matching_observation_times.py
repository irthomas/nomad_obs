# -*- coding: utf-8 -*-
"""
Created on Mon Apr  7 12:37:46 2025

@author: iant

FIND OCCULTATIONS CLOSEST TO EACH UTC TIME INPUT

THE ORBITLIST NEEDS TO BE GENERATED BY RUN_PLANNING FIRST
"""

from datetime import datetime, timedelta


search_for = "occultation"

search_times = [
    "2025 JUN 05 14:42:42",
    "2025 JUN 06 06:26:23",
    "2025 JUN 06 08:24:17",
    "2025 JUN 06 12:20:16",
    "2025 JUN 06 16:16:13",
    "2025 JUN 06 18:14:08",
    "2025 JUN 07 00:07:59",
    "2025 JUN 07 04:03:59",
    "2025 JUN 07 09:57:44",
]
SEARCH_DT_FORMAT = "%Y %b %d %H:%M:%S"


ORBITLIST_DT_FORMAT = "%Y %b %d %H:%M:%S"

for search_time in search_times:

    etTime = datetime.strptime(search_time, SEARCH_DT_FORMAT)

    found = False

    for orbit in orbitList:

        if "ingress" in orbit.keys():
            utcStart = orbit["ingress"]["utcStart"]
            utcEnd = orbit["ingress"]["utcEnd"]

            etStart = datetime.strptime(utcStart, ORBITLIST_DT_FORMAT) - timedelta(seconds=10)
            etEnd = datetime.strptime(utcEnd, ORBITLIST_DT_FORMAT) + timedelta(seconds=10)

            found = True
            if etStart < etTime and etTime < etEnd:
                orbitNumber = orbit["orbitNumber"]
                prime = orbit["ingress"]["primeInstrument"]
                print("Match found: %s ingress orbit %i (%s)" % (prime, orbitNumber, search_time))

        if "egress" in orbit.keys():
            utcStart = orbit["egress"]["utcStart"]
            utcEnd = orbit["egress"]["utcEnd"]

            etStart = datetime.strptime(utcStart, ORBITLIST_DT_FORMAT) - timedelta(seconds=10)
            etEnd = datetime.strptime(utcEnd, ORBITLIST_DT_FORMAT) + timedelta(seconds=10)

            found = True
            if etStart < etTime and etTime < etEnd:
                orbitNumber = orbit["orbitNumber"]
                prime = orbit["egress"]["primeInstrument"]
                print("Match found: %s egress orbit %i (%s)" % (prime, orbitNumber, search_time))

    if not found:
        print("Not found: %s" % search_time)
